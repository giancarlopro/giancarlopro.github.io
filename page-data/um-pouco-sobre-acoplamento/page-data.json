{"componentChunkName":"component---src-templates-blog-post-js","path":"/um-pouco-sobre-acoplamento/","result":{"data":{"site":{"siteMetadata":{"title":"Giancarlo Rocha"}},"markdownRemark":{"id":"2489968c-3ca3-5685-abc2-80a2895cdcc6","excerpt":"Acoplamento é a força que une os componentes do software, e se refere ao quanto um componente depende de outro para realizar sua função. Quanto mais acoplado…","html":"<p>Acoplamento é a força que une os componentes do software, e se refere ao quanto um componente depende de outro para realizar sua função. Quanto mais acoplado forem os componentes, mais difícil fica para dar manutenção ao código, por isso busca-se designs de software com o mínimo de acoplamento possível.</p>\n<h3>Exemplos</h3>\n<p>Para ficar mais claro o que é acoplamento, vamos imaginar um carro e uma pessoa, caso queiramos trocar os pneus, ou o motor de um carro, nós conseguimos fazer isso sem necessáriamente alterar a estrutura do carro, e o carro continuaria funcionando com a parte nova instalada, então dizemos que o carro possui um baixo acoplamento entre seus componentes.</p>\n<p>Já com uma pessoa, não conseguimos, com a mesma facilidade, trocar uma perna, por exemplo, é algo complexo e que envolve o sistema circulatório, sistema nervoso e etc… Portanto podemos dizer que uma pessoa tem alto acoplamento entre seus componentes.</p>\n<p>Vejamos um exemplo de alto acoplamento e baixo acoplamento com código:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Classe acoplada ao banco de dados MySQL</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PessoaModel</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">MySQLDatabase</span> database<span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">PessoaModel</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MySQLDatabase</span> database<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>database <span class=\"token operator\">=</span> database<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Exemplo de classe que depende de uma interface genérica de banco de dados</span>\n<span class=\"token comment\">// que para alterar o banco seria necessário somente alterar a implementação</span>\n<span class=\"token comment\">// concreta de IDatabase.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Imagine que existam as implementações MySQLDatabase, PostgreSQLDatabase</span>\n<span class=\"token comment\">// e que elas implementam a interface IDatabase</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">IDatabase</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">IRecord</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/* params */</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/* params */</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PessoaModel</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">IDatabase</span> database<span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">PessoaModel</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IDatabase</span> database<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>database <span class=\"token operator\">=</span> database<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>No primeiro exemplo a classe <code class=\"language-text\">PessoaModel</code> depende exclusivamente da implementação de <code class=\"language-text\">MySQLDatabase</code> , assim, caso seja necessário mudar o banco de dados seria necessário modificar a classe <code class=\"language-text\">PessoaModel</code> para utilizar a nova implementação de banco de dados, e cada model existente no sistema deveria ser alterado também.</p>\n<p>Já no segundo exemplo, possuímos a interface <code class=\"language-text\">IDatabase</code> que define os métodos genéricos que a classe <code class=\"language-text\">PessoaModel</code> pode utilizar. Sempre que for necessário alterar o banco de dados, basta criar uma nova implementação de <code class=\"language-text\">IDatabase</code> que a classe <code class=\"language-text\">PessoaModel</code> já vai saber utilizar essa nova implementação sem precisar ser alterada.</p>\n<h3>Conclusão</h3>\n<p>Desenvolver buscando baixo acoplamento, vai te dar uma facilidade maior para adicionar novas funcionalidades e reduzir o risco de quebrar as funcionalidades já existentes, e vai tornar mais fácil adicionar testes automatizados, caso ainda não esteja utilizando, já que componentes separados são mais fáceis de testar.</p>\n<p>É bom lembrar que o acoplamento máximo é difícil de ser atingido, dado que os componentes do software precisam interagir entre si de alguma forma, e que sempre irão existir demandas de tempo para entrega do software, já que reduzir o acoplamento pode trazer mais complexidade pro código, aumentando o tempo necessário para desenvolve-lo.</p>\n<h3>Referências</h3>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/2832017/what-is-the-difference-between-loose-coupling-and-tight-coupling-in-the-object-o/37993102#37993102\">Explicação de acoplamento no stackoverflow (inglês)</a></li>\n<li><a href=\"https://stackoverflow.com/questions/39946/coupling-and-cohesion/39988#39988\">Explicação de acoplamento e coesão nos stackoverflow (inglês)</a></li>\n<li><a href=\"https://mrpicky.dev/a-brief-history-of-coupling-and-cohesion/\">A brief history of coupling and cohesion (artigo)</a></li>\n<li><a href=\"https://blog.cleancoder.com/uncle-bob/2014/05/08/SingleReponsibilityPrinciple.html\">SRP (Uncle Bob)</a></li>\n</ul>","frontmatter":{"title":"Um Pouco Sobre Acoplamento","date":"August 11, 2021","description":"Um resumo sobre o que eu entendo por coplamento, no mundo do desenvolvimento de software."}}},"pageContext":{"slug":"/um-pouco-sobre-acoplamento/","previous":null,"next":null}},"staticQueryHashes":["1246554614","2841359383"]}